import random
from pathlib import Path
from typing import List, Dict
import json
import logging

logger = logging.getLogger(__name__)

class ResponseGenerator:
    def __init__(self):
        self.styles = {
            "luxury": "üíé –ü—Ä–µ–º–∏—É–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            "standard": "üè° –•–æ—Ä–æ—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç",
            "budget": "üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –≤—ã–±–æ—Ä"
        }
        self.apartments = []
        self._load_apartments()

    def _load_apartments(self):
        try:
            apartments_path = Path(__file__).parent.parent / "data" / "apartments.json"
            with open(apartments_path, 'r', encoding='utf-8') as f:
                self.apartments = json.load(f)
        except Exception as e:
            logger.error(f"Error loading apartments: {e}")
            self.apartments = []

    def _format_apartment(self, apt: Dict) -> str:
        style = self.styles.get(apt.get("style", "standard"))
        features = "\n".join(f"‚Ä¢ {f}" for f in apt["features"])

        return (
            f"{style}\n"
            f"üè¢ {apt['address']}\n"
            f"üìê {apt['area']} –º¬≤ | {apt['rooms']} –∫–æ–º–Ω–∞—Ç—ã\n"
            f"üè∑Ô∏è {apt['price']:,} —Ä—É–±.\n"
            f"\n‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n{features}\n"
            f"\nüìå {apt['description']}\n"
            f"\n‚òé –ö–æ–Ω—Ç–∞–∫—Ç: {apt.get('contact', '+7 (XXX) XXX-XX-XX')}"
        )

    def generate_response(self, intent: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¢–û–õ–¨–ö–û –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        if intent == "ai_question":
            return []  # –í AI-—Ä–µ–∂–∏–º–µ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        if intent == "dialogue_answer": # –û—Ç–≤–µ—Ç —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –≤ intent_classifier
            return []

        responses = []
        
        if intent == "greeting":
            responses.append(random.choice([
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –≥–∏–¥ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∂–∏–ª—å—è.",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!"
            ]))
        elif intent == "self_info":
            responses.append(random.choice([
                "–Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ú–æ–≥—É –ø–æ–º–æ—á—å –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É!",
                "–í–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –∏ –ø–æ–∫—É–ø–∫–µ –∂–∏–ª—å—è!",
                "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–¥–±–æ—Ä–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏!"
            ]))
        elif intent == "mood":
            responses.append(random.choice([
                "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å.",
                "–†–∞–±–æ—Ç–∞—é –≤ —à—Ç–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ! –ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å.",
                "–ö–∞–∫ –≤ —Å–∫–∞–∑–∫–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!"
            ]))
        elif intent == "goodbye":
            responses.append(random.choice([
                "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞ –Ω–æ–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏!",
                "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ‚Äî –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å.",
                "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!",
            ]))
        elif intent == "apartment":
            responses.append(random.choice([
                "–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä:",
                "–ü–æ–¥–æ–±—Ä–∞–ª –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:",
                "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–∏–ª—å—è –¥–ª—è –≤–∞—Å:"
            ]))
            if self.apartments:
                for apt in random.sample(self.apartments, min(3, len(self.apartments))):
                    responses.append(self._format_apartment(apt))
        else:
            responses.append(random.choice([
                "–ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ú–æ–∂–µ—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?",
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
                "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–∞–∑–∞—Ç—å –∏–Ω–∞—á–µ."
            ]))

        return responses if intent in ["apartment", "unknown"] else responses[:1]