import random
from pathlib import Path
import json
import logging
from typing import List, Optional

logger = logging.getLogger(__name__)

class ResponseGenerator:
    STYLE_EMOJIS = {
        "luxury": "üíé –õ—é–∫—Å",
        "standard": "üè† –°—Ç–∞–Ω–¥–∞—Ä—Ç",
        "budget": "üí∞ –ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
    }
    
    def __init__(self):
        self.apartments = []
        self._load_apartments()
        logger.info(f"ResponseGenerator loaded {len(self.apartments)} apartments")

    def _load_apartments(self):
        apt_path = Path(__file__).parent.parent / "data" / "apartments.json"
        if apt_path.exists():
            try:
                with open(apt_path, 'r', encoding='utf-8') as f:
                    self.apartments = json.load(f)
                    logger.info(f"üè¢ Loaded {len(self.apartments)} apartments")
            except Exception as e:
                logger.error(f"üö® Apartment loading error: {str(e)}")
        else:
            logger.warning("Apartments file not found")

    def _format_apartment(self, apt: dict) -> str:
        style = self.STYLE_EMOJIS.get(apt.get("style", "standard"))
        features = "\n".join(f"‚Ä¢ {feat}" for feat in apt.get("features", []))
        
        return (
            f"{style}\n"
            f"üìç {apt['address']}\n"
            f"üìè {apt['area']} –º¬≤ | üõèÔ∏è {apt['rooms']} –∫–æ–º–Ω–∞—Ç—ã\n"
            f"üíµ {apt['price']:,} —Ä—É–±.{' –≤ –º–µ—Å—è—Ü' if apt.get('rental', False) else ''}\n\n"
            f"üîÆ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n{features}\n\n"
            f"üìù {apt['description']}\n\n"
            f"üë§ {apt.get('contact', '–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')}"
        )

    def get_random_apartment(self) -> Optional[str]:
        if not self.apartments:
            return None
        apt = random.choice(self.apartments)
        return self._format_apartment(apt)

    def generate(self, intent: str) -> List[str]:
        responses = []
        
        if intent == "greeting":
            responses.append(random.choice([
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å—ë –¥–ª—è –≤–∞—Å. üè†",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–∏–ª—å—è! üåÜ"
            ]))
            
        elif intent == "self_info":
            responses.append("–Ø –±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–¥–±–æ—Ä–µ –∫–≤–∞—Ä—Ç–∏—Ä –∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ! üè°")
            
        elif intent == "mood":
            responses.append(random.choice([
                "–û—Ç–ª–∏—á–Ω–æ, –≥–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—Ç—å! üòä",
                "–£ –º–µ–Ω—è –≤—Å—ë —á—É–¥–µ—Å–Ω–æ, –∫–∞–∫ —É –±–æ—Ç–∞! ü§ñ",
                "–í –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏, –ø–æ–º–æ–≥—É –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∂–∏–ª—å—è. üí™"
            ]))
            
        elif intent == "goodbye":
            responses.append("–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å. üëã")
            
        elif intent == "apartment":
            if not self.apartments:
                responses.append("‚õî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å–µ–π—á–∞—Å.")
                return responses
                
            responses.append("üèôÔ∏è –í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:")
            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã
            for apt in random.sample(self.apartments, min(3, len(self.apartments))):
                responses.append(self._format_apartment(apt))
                
        else:  # unknown intent
            return []  # –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ AI-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            
        return responses
