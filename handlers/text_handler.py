import random
import logging
import os
from pathlib import Path
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from services import ai_service, voice_service, intent_classifier, response_generator
from config.settings import save_user_setting, get_user_settings

logger = logging.getLogger(__name__)

APT_RECOMMEND_PROBABILITY = 0.25
GENERAL_RECOMMEND_PROBABILITY = 0.1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {user.mention_html()}! üëã –Ø —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.\n\n"
        "<b>üè† –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ /search - –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã üîé\n"
        "‚Ä¢ /ai_mode - AI-—Ä–µ–∂–∏–º\n"
        "‚Ä¢ /voice_mode - –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º\n\n"
        "<i>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –æ —Ç–æ–º, —á—Ç–æ –∏—â–µ—à—å, –∏ —è –ø–æ–¥–±–µ—Ä—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã! üòä</i>",
        reply_markup=ReplyKeyboardRemove()
    )

async def toggle_ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    current_settings = get_user_settings(user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    new_mode = not current_settings.get("ai_mode", False)
    
    save_user_setting(user_id, "ai_mode", new_mode)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await update.message.reply_text(f"ü§ñ AI —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

async def toggle_voice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    current_settings = get_user_settings(user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    new_mode = not current_settings.get("voice_mode", False)
    
    save_user_setting(user_id, "voice_mode", new_mode)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    await update.message.reply_text(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")

async def search_apartments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    responses = response_generator.generate("apartment")  # –≠–∫–∑–µ–º–ø–ª—è—Ä –∏–∑ —Å—Ä–∞–∑—É —Å–µ—Ä–≤–∏—Å–∞
    for response in responses:
        await send_response(update, context.bot, response)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text or not update.message.text.strip():
        return
        
    user_id = update.effective_user.id
    user_settings_data = get_user_settings(user_id)
    ai_active = user_settings_data.get("ai_mode", False)
    text = update.message.text.strip()
    
    logger.info(f"Text Handler | User:{user_id} | Text: {text} | AI Active: {ai_active}")
    
    intent, prepared_response = intent_classifier.classify(text, ai_active)
    
    logger.info(f"Intent: {intent} | Prepared: {bool(prepared_response)}")
    
    if prepared_response:
        await send_response(update, context.bot, prepared_response)
        return
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ AI –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ AI-—Ä–µ–∂–∏–º–µ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    if ai_active or intent == "unknown":
        logger.info("Using AI processing...")
        
        # –°–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        chat_id = update.effective_chat.id
        thinking_msg = await context.bot.send_message(
            chat_id=chat_id,
            text="ü§î –î—É–º–∞—é...",
            reply_to_message_id=update.message.message_id
        )
        
        ai_response = ai_service.generate_response(text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é..."
        await context.bot.delete_message(
            chat_id=chat_id,
            message_id=thinking_msg.message_id
        )
        
        if ai_response:
            logger.info(f"AI Response: {ai_response[:50]}...")
            # –î–æ–±–∞–≤–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30%
            if random.random() < APT_RECOMMEND_PROBABILITY:
                apartment = response_generator.get_random_apartment()
                if apartment:
                    ai_response += f"\n\n‚ú® –ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç –æ—Ç–ª–∏—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—Å:\n\n{apartment}"
                    
            await send_response(update, context.bot, ai_response)
            return
        else:
            # –ï—Å–ª–∏ AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=chat_id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∞—á–µ.",
                reply_to_message_id=update.message.message_id
            )
            return
    
    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö intents
    responses = response_generator.generate(intent)
    
    # –î–æ–±–∞–≤–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if random.random() < GENERAL_RECOMMEND_PROBABILITY:
        apartment = response_generator.get_random_apartment()
        if apartment:
            responses.append(f"\n\nüè† –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç:\n\n{apartment}")
    
    for response in responses:
        await send_response(update, context.bot, response)


async def send_response(update: Update, bot, text: str) -> None:
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    if text:
        await bot.send_message(chat_id, text, parse_mode="HTML")
    
    user_settings_data = get_user_settings(user_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
    voice_mode_active = user_settings_data.get("voice_mode", False)
    
    if voice_mode_active and text:
        logger.info("Sending voice response...")
        if voice_path := voice_service.text_to_speech(text, user_id):
            try:
                if Path(voice_path).exists():
                    with open(voice_path, 'rb') as voice_file:
                        await bot.send_voice(chat_id, voice=voice_file)
                    logger.info("Voice sent successfully")
                else:
                    logger.error(f"Voice file not found: {voice_path}")
            except Exception as e:
                logger.error(f"Voice send error: {str(e)}", exc_info=True)
            finally:
                try:
                    if Path(voice_path).exists():
                        Path(voice_path).unlink()
                except Exception as e:
                    logger.error(f"Failed to delete voice file: {str(e)}")
