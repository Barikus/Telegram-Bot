from telegram import Message, Update
from telegram.ext import ContextTypes
from services.ai_service import AIService
from services.voice_service import voice_service
from services.intent_classifier import IntentClassifier
from services.response_generator import ResponseGenerator
from config.settings import user_settings
import logging
import os

logger = logging.getLogger(__name__)
intent_classifier = IntentClassifier()
response_generator = ResponseGenerator()
ai_service = AIService()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üè† –ë–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/search - –ü–æ–∏—Å–∫ –∫–≤–∞—Ä—Ç–∏—Ä\n"
        "/ai_mode - AI —Ä–µ–∂–∏–º\n"
        "/voice_mode - –ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º"
    )

async def toggle_ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current = user_settings.get_user_settings(user_id).get("ai_mode", False)
    user_settings.save_user_setting(user_id, "ai_mode", not current)
    await update.message.reply_text(f"AI —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")

async def toggle_voice_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    current = user_settings.get_user_settings(user_id).get("voice_mode", False)
    user_settings.save_user_setting(user_id, "voice_mode", not current)
    await update.message.reply_text(f"–ì–æ–ª–æ—Å–æ–≤–æ–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if not current else '–≤—ã–∫–ª—é—á–µ–Ω'}")

async def search_apartments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    responses = response_generator.generate_response("apartment")
    for response in responses:
        await send_response(update, response, user_id)

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    text = update.message.text.strip()
    if not text:  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    settings = user_settings.get_user_settings(user_id)

    if settings.get("ai_mode", False) and ai_service.llm:
        ai_response = ai_service.generate_response(text)
        if ai_response:
            await send_response(update, ai_response, user_id)
            return
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò")
        return

    intent, dialogue_answer = intent_classifier.process(text)
    
    if dialogue_answer:
        await send_response(update, dialogue_answer, user_id)
        return
        
    responses = response_generator.generate_response(intent)
    if not responses:
        responses = ["–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"]
        
    for response in responses:
        await send_response(update, response, user_id)

async def send_response(update: Update, response: str, user_id: int):
    if user_settings.get_user_settings(user_id).get("voice_mode", False):
        voice_path = voice_service.text_to_voice(response, user_id)
        if voice_path:
            try:
                with open(voice_path, 'rb') as voice_file:
                    await update.message.reply_voice(voice=voice_file)
            finally:
                try:
                    os.remove(voice_path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    await update.message.reply_text(response)

async def process_text_content(text: str, original_update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)"""
    fake_update = Update(
        update_id=original_update.update_id + 1,
        message=Message(
            message_id=original_update.message.message_id + 1,
            date=original_update.message.date,
            chat=original_update.message.chat,
            from_user=original_update.message.from_user,
            text=text
        )
    )
    await handle_text_message(fake_update, context)