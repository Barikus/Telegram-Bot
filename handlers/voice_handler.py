import logging
from pathlib import Path
from telegram import Update, Message
from telegram.ext import ContextTypes
from services import voice_service
from config.settings import get_user_settings
from .text_handler import handle_text
from datetime import datetime
import random

logger = logging.getLogger(__name__)

class CustomMessage:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    def __init__(self, original_message, text):
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.text = text
        self.message_id = random.randint(-1000000000, -1)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–ª—è —Ñ–µ–π–∫–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.date = datetime.now()
        self.chat = original_message.chat
        self.from_user = original_message.from_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.effective_user = original_message.from_user  # –î–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ from_user
        self.effective_chat = original_message.chat  # –≠—Ç–∏–º —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        # –ö–æ–ø–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.forward_from = None
        self.forward_date = None
        self.reply_to_message = None
        self.voice = None
        self.caption = None
        self.entities = None
        self.caption_entities = None

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ reply, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
    @property
    def reply(self):
        return self.reply_to_message

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.voice:
        return
        
    user_id = update.effective_user.id
    user_settings_data = get_user_settings(user_id)

    if not user_settings_data.get("voice_mode", False):
        await update.message.reply_text("‚ÑπÔ∏è –î–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é /voice_mode")
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
    temp_dir = Path("temp") / "downloads"
    temp_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    voice_file = await context.bot.get_file(update.message.voice.file_id)
    audio_path = temp_dir / f"voice_{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.ogg"
    await voice_file.download_to_drive(audio_path)
    
    if not audio_path.exists():
        logger.error(f"Failed to download voice: {audio_path}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
    recognized_text = voice_service.speech_to_text(str(audio_path))
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        audio_path.unlink()
    except Exception as e:
        logger.warning(f"Error deleting audio file: {str(e)}")

    if recognized_text:
        logger.info(f"Recognized text: {recognized_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        custom_message = CustomMessage(update.message, recognized_text)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π update
        custom_update = Update(
            update_id=update.update_id + 1000 * int(datetime.now().timestamp()),
            message=custom_message
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_text(custom_update, context)
    else:
        await update.message.reply_text("üîá –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º.")
